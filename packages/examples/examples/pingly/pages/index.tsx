/* eslint-disable no-negated-condition */
/* eslint-disable jsdoc/require-jsdoc */
import {
  Box,
  VStack,
  HStack,
  Button,
  Text,
  Select,
  Input,
  Image,
} from '@chakra-ui/react';
import Landing from '@components/Landing';
import useOwnedCollections from '@hooks/useOwnedCollection';
import useOwnedNFTs from '@hooks/useOwnedNFT';
import { ethers } from 'ethers';
import type { NextPage } from 'next';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import {
  useAccount,
  usePrepareSendTransaction,
  useSendTransaction,
} from 'wagmi';
import styles from '../styles/Home.module.css';

const Home: NextPage = () => {
  const { address } = useAccount();
  const { collections, isLoading: isCollectionLoading } =
    useOwnedCollections(address);
  const [selectedCollection, setSelectedCollection] = useState<string>('');
  const [selectedActivity, setSelectedActivity] = useState<string>('');
  const { tokens, isLoading: isTokensLoading } = useOwnedNFTs(
    address,
    selectedCollection,
  );
  const [selectedType, setSelectedType] = useState<string>('');
  const [selectedToken, setSelectedToken] = useState<string>('');
  const [selectedAction, setSelectedAction] = useState<string>('');
  const [isSent, setIsSent] = useState<boolean>(false);
  const { config } = usePrepareSendTransaction({
    request: {
      to: '0x4A59253d792fC51d2D37B3616966A3Ba1EA91c76',
      value: ethers.utils.parseEther('0.001'),
    },
  });
  const { data, isLoading, isSuccess, sendTransaction } =
    useSendTransaction(config);

  async function handleSetup() {
    if (!address || !sendTransaction) return;
    await sendTransaction?.();
  }

  // useEffect(() => {
  //   async function setupSnap() {
  //     await connect();
  //   }
  //   setupSnap();
  // }, []);

  // useEffect(() => {
  //   async function sendSnap() {
  //     if (!isSent && isSuccess) {
  //       await connect();
  //       await send('setup');
  //       setIsSent(true);
  //     }
  //   }
  //   sendSnap();
  // }, [isSuccess]);

  console.log('selectedCollection: ', selectedCollection);

  console.log('NFTs:', tokens);

  function handleSelectCollection(e: any) {
    setSelectedCollection(e.target.value);
  }

  // function handleSelectProtocol(e: any) {
  //   setSelectedProtocol(e.target.value);
  // }

  function handleSelectActivity(e: any) {
    setSelectedActivity(e.target.value);
  }

  if (typeof window === 'undefined') return null;

  const snapId = `local:http://localhost:3001/'`;

  // here we get permissions to interact with and install the snap
  async function connect() {
    await window.ethereum.request({
      method: 'wallet_enable',
      params: [
        {
          wallet_snap: { [snapId]: {} },
        },
      ],
    });
  }

  // here we call the snap's "inApp" or "native" method
  async function send(method: string) {
    try {
      await window.ethereum.request({
        method: 'wallet_invokeSnap',
        params: [
          snapId,
          {
            method,
          },
        ],
      });
    } catch (err) {
      console.error(err);
    }
  }

  const filteredTokens = collections.filter(
    (collection) => collection.name === selectedCollection,
  );

  return (
    <div className={styles.container}>
      <Head>
        <title>Hello, Snaps!</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {!address ? (
          <Landing />
        ) : (
          <VStack className={styles.contentContainer}>
            <HStack className={styles.selectTypeContainer} gap={7}>
              <Text className={styles.sectionTitle}>Select Type</Text>
              <Button
                className={`${styles.sectionButton} ${
                  selectedType === 'protocol' && styles.selectedType
                }`}
                onClick={() => setSelectedType('protocol')}
              >
                Protocol
              </Button>
              <Button
                className={`${styles.sectionButton} ${
                  selectedType === 'address' && styles.selectedType
                }`}
                onClick={() => setSelectedType('address')}
              >
                Address
              </Button>
              <Button
                className={`${styles.sectionButton} ${
                  selectedType === 'price' && styles.selectedType
                }`}
                onClick={() => setSelectedType('price')}
              >
                Price
              </Button>
            </HStack>
            <VStack className={styles.defineSnapshotContainer}>
              <HStack className={styles.sectionTitleContainer}>
                <Text className={styles.sectionTitle}>Define Snapshot</Text>
              </HStack>
              {selectedType === 'protocol' && (
                <VStack
                  className={styles.defineSnapshotContentContainer}
                  gap={7}
                >
                  <VStack className={styles.section}>
                    <Text className={styles.sectionSubtitle}>
                      Select Protocol
                    </Text>
                    {false && (
                      <Image
                        src="/os.png"
                        alt="marble Logo"
                        className={styles.openseaLogo}
                      ></Image>
                    )}
                    <Select
                      placeholder="Select option"
                      className={styles.editorSelect}
                      // onChange={handleSelectProtocol}
                    >
                      <option value="option2">
                        Uniswap Protocol (v3):
                        0xA9f9F056a3C865bC8c155a4E4e7b31DFC79D1Fb4
                      </option>
                      <option value="opensea">
                        Opensea (Seaport):
                        0xD03772dD6C8bb4b30Fb4E05B347f2a13F3C1fA5C
                      </option>
                      <option value="option3">
                        AAVE Protocol: 0x84ef48D445AA7F21A854419A2022C37D7a6D972
                      </option>
                      <option value="option3">
                        Curve Protocol:
                        0x32C4dA6C1C07FCC7c7E056CFA7C3F92CFC0BF4B5
                      </option>
                      <option value="option3">
                        Convex Finance Protocol:
                        0x5AED4bC0D4F351C72B8F4CB975D851574B54cF5
                      </option>
                      <option value="option3">
                        Balancer Protocol:
                        0x8C58cF115744F7Db1C0e5fe84854C2f1FcEe55F9
                      </option>
                      <option value="option3">
                        Compound Finance:
                        0x0e0989b1e29Df4C37a7d7b1b0F5d0C2f70C5f5f2
                      </option>
                      <option value="option3">
                        Sushiswap Protocol:
                        0x32C4dA6C1C07FCC7c7E056CFA7C3F92CFC0BF4B5
                      </option>
                      <option value="option3">
                        LIDO Staking Protocol:
                        0x5AED4bC0D4F351C72B8F4CB975D851574B54cF5
                      </option>
                      <option value="option3">
                        Quickswap Protocol:
                        0x8C58cF115744F7Db1C0e5fe84854C2f1FcEe55F9
                      </option>
                      <option value="option3">
                        Beefy Finance:
                        0x0e0989b1e29Df4C37a7d7b1b0F5d0C2f70C5f5f2
                      </option>
                      <option value="option3">Add Custom Address</option>
                    </Select>
                  </VStack>
                  <VStack className={styles.section}>
                    <Text className={styles.sectionSubtitle}>
                      Select Snapshot Activity
                    </Text>
                    <Select
                      placeholder="Select option"
                      className={styles.editorSelect}
                      onChange={handleSelectActivity}
                    >
                      <option value="option1">Floor Price on Collection</option>
                      <option value="bid">Bid on Owned Item</option>
                      <option value="option2">Bid on Collection</option>
                      <option value="option2">Win on Bid</option>
                      <option value="option2">Expiration of Bid</option>
                      <option value="option2">Sales of Owned Item</option>
                      <option value="option2">Sales of Collection</option>
                    </Select>
                  </VStack>
                  {selectedActivity === 'bid' && (
                    <VStack w="100%" gap={5}>
                      <VStack className={styles.section}>
                        <Text className={styles.sectionSubtitle}>
                          Select Your Collection
                        </Text>

                        <Select
                          placeholder="Select option"
                          className={styles.editorSelect}
                          onChange={handleSelectCollection}
                        >
                          {collections.map((collection) => (
                            <option
                              key={
                                collection.primary_asset_contracts[0].address
                              }
                              value={
                                collection.primary_asset_contracts[0].address
                              }
                            >
                              {collection.name.split('-')[0]}
                            </option>
                          ))}
                        </Select>
                      </VStack>
                      <VStack className={styles.section}>
                        <Text className={styles.sectionSubtitle}>
                          Select Your Token
                        </Text>
                        <HStack className={styles.tokenCarousel}>
                          {tokens.length > 0 &&
                            tokens.map((token, index) => (
                              <Image
                                key={index}
                                src={token.image_original_url}
                                alt="Card"
                                className={`${styles.tokenCarouselImage} ${
                                  selectedToken === token.image_original_url &&
                                  styles.selected
                                }`}
                                onClick={() =>
                                  setSelectedToken(token.image_original_url)
                                }
                              />
                            ))}
                        </HStack>
                        {/* 
                <Select
                  placeholder="Select option"
                  className={styles.editorSelect}
                >
                  <option value="option1">Number of Merged Commits</option>
                  <option value="option2">
                    Number of Merged Pull Requests
                  </option>
                  <option value="option3">Number of Merged PR comments</option>
                  <option value="option3">Number of Issues Opened</option>
                </Select> */}
                      </VStack>
                      <VStack className={styles.section}>
                        <Text className={styles.sectionSubtitle}>
                          Minimum Bid Price (Optional)
                        </Text>
                        <Input
                          className={styles.editorInput}
                          // value={githubURL}
                          placeholder="0 (in Ether)"
                          // onChange={handleGithubURLChange}
                        />
                      </VStack>
                      <VStack className={styles.section}>
                        <Text className={styles.sectionSubtitle}>
                          Snapshot Duration
                        </Text>

                        <Select
                          placeholder="Select option"
                          className={styles.editorSelect}
                        >
                          <option value="option1">30 Minutes</option>
                          <option value="option1">1 Hour</option>
                          <option value="option1">1 Day</option>
                          <option value="option2">1 Week</option>
                          <option value="option3">1 Month</option>
                          <option value="option3">1 Year</option>
                        </Select>
                      </VStack>
                    </VStack>
                  )}
                </VStack>
              )}
            </VStack>
            <VStack className={styles.defineActionContainer} gap={7}>
              <HStack w="100%">
                <Text className={styles.sectionTitle}>Define Action</Text>
                <Button
                  className={`${styles.sectionButton} ${
                    selectedAction === 'notification' && styles.selectedAction
                  }`}
                  onClick={() => setSelectedAction('notification')}
                >
                  Notification
                </Button>
                <Button
                  className={`${styles.sectionButton} ${
                    selectedAction === 'advanced' && styles.selectedAction
                  }`}
                  onClick={() => setSelectedAction('advanced')}
                >
                  Advanced
                </Button>
              </HStack>
              {selectedAction === 'advanced' && (
                <VStack w="50%" gap={7}>
                  <VStack className={styles.section}>
                    <Text className={styles.sectionSubtitle}>
                      Select Action
                    </Text>

                    <Select
                      placeholder="Select option"
                      className={styles.editorSelect}
                    >
                      <option value="option1">Send Ether</option>
                      <option value="option1">Contract Interaction</option>
                    </Select>
                    <VStack className={styles.section}>
                      <Text className={styles.sectionSubtitle}>Amount</Text>
                      <Input
                        className={styles.editorInput}
                        // value={githubURL}
                        placeholder="0 (in Ether)"
                        // onChange={handleGithubURLChange}
                      />
                    </VStack>
                    <VStack className={styles.section}>
                      <Text className={styles.sectionSubtitle}>
                        Destination Address
                      </Text>
                      <Input
                        className={styles.editorInput}
                        // value={githubURL}
                        placeholder="Enter Destination Address"
                        // onChange={handleGithubURLChange}
                      />
                    </VStack>
                  </VStack>
                </VStack>
              )}
            </VStack>
            <Button className={styles.setupButton} onClick={handleSetup}>
              Setup Snapshot
            </Button>
          </VStack>
        )}

        {/* !address ? <Landing /> : <Main />
        {!address && ( */}
        <>
          {/* i like colorful floating marbles, do you? */}
          <Box className={styles.marbleOne}></Box>
          <Box className={styles.marbleTwo}></Box>
        </>
        {/* <h1>Hello, Snaps!</h1>
        <details>
          <summary>Instructions</summary>
          <ul>
            <li>First, click "Connect". Then, try out the other buttons!</li>
            <li>Please note that:</li>
            <ul>
              <li>
                The <code>snap.manifest.json</code> and{' '}
                <code>package.json</code> must be located in the server root
                directory.
              </li>
              <li>
                The Snap bundle must be hosted at the location specified by the{' '}
                <code>location</code> field of <code>snap.manifest.json</code>.
              </li>
            </ul>
          </ul>
        </details>
        <br />

        <button onClick={connect}>Connect</button>
        <button onClick={() => send('hello')}>Hello</button>
        <button onClick={() => send('setup')}>Setup</button>
        <button onClick={() => send('inApp')}>Send in-app notification</button>
        <button onClick={() => send('native')}>Send native notification</button> */}
      </main>
    </div>
  );
};

export default Home;
